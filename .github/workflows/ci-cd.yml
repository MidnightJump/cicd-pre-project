# name: Simplified CI/CD

# # on:
# #   push:
# #     branches: [ main, develop ]
# #   pull_request:
# #     branches: [ main, develop ]

# env:
#   PYTHON_VERSION: "3.11"

# jobs:
#   quality-and-tests:
#     name: Quality Checks & Tests
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install -r requirements-dev-compatible.txt

#       - name: Code quality checks
#         run: |
#           echo "🎨 检查代码格式..."
#           black --check --diff .
#           echo "📦 检查导入排序..."
#           isort --check-only --diff .
#           echo "🔍 代码规范检查..."
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

#       - name: Security checks
#         run: |
#           echo "🔒 安全扫描..."
#           bandit -r . --severity-level medium --quiet
#           pip-audit --desc --quiet



#       - name: Run tests
#         run: |
#           echo "🧪 运行测试..."
#           pytest tests/ -v --tb=short

#       - name: Performance check
#         run: |
#           echo "⚡ 性能检查..."
#           python -c "
#           import time
#           from fastapi.testclient import TestClient
#           from books2 import app
          
#           client = TestClient(app)
#           start = time.time()
#           response = client.get('/books')
#           duration = time.time() - start
          
#           assert response.status_code == 200
#           assert duration < 1.0, f'响应时间 {duration:.2f}s 超过1秒'
#           print(f'✅ API响应时间: {duration:.2f}s')
#           "

#       - name: Test summary
#         if: always()
#         run: |
#           echo "## 📊 测试结果汇总"
#           echo "================================="
#           if [[ "${{ job.status }}" == "success" ]]; then
#             echo "🎉 所有检查通过！代码质量良好，可以合并。"
#           else
#             echo "❌ 部分检查失败，请修复问题后重新提交。"
#             exit 1
#           fi 