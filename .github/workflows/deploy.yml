name: Deploy to Server

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-to-server:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        environment: 
          - name: development
            branch: develop
            server: ${{ secrets.DEV_SERVER_HOST }}
            port: 8000
          - name: production
            branch: main
            server: ${{ secrets.PROD_SERVER_HOST }}
            port: 8000
    environment:
      name: ${{ matrix.environment.name }}
      url: http://${{ matrix.environment.server }}:${{ matrix.environment.port }}
    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4

      - name: Set up deployment variables
        id: vars
        run: |
          if [[ "${{ github.event.workflow_run.head_branch }}" == "${{ matrix.environment.branch }}" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "image_tag=${{ matrix.environment.branch }}" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to ${{ matrix.environment.name }} server
        if: steps.vars.outputs.should_deploy == 'true'
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ matrix.environment.server }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            # 设置变量
            export CONTAINER_NAME="fastapi-books-${{ matrix.environment.name }}"
            export IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            export IMAGE_TAG="${{ steps.vars.outputs.image_tag }}"
            export PORT="${{ matrix.environment.port }}"
            export ENVIRONMENT="${{ matrix.environment.name }}"
            
            # 登录到容器注册表
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # 创建部署目录
            mkdir -p ~/deployments/fastapi-books
            cd ~/deployments/fastapi-books
            
            # 下载部署脚本
            curl -o deploy.sh https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/scripts/deploy.sh
            chmod +x deploy.sh
            
            # 修改脚本中的变量
            sed -i "s/CONTAINER_NAME=\"fastapi-books\"/CONTAINER_NAME=\"$CONTAINER_NAME\"/" deploy.sh
            sed -i "s|IMAGE_NAME=\"ghcr.io/midnightjump/cicd-pre-project\"|IMAGE_NAME=\"$IMAGE_NAME\"|" deploy.sh
            sed -i "s/PORT=\"8000\"/PORT=\"$PORT\"/" deploy.sh
            
            # 执行部署
            ./deploy.sh deploy $IMAGE_TAG
            
            # 验证部署
            sleep 30
            if curl -f http://localhost:$PORT/books; then
              echo "✅ 部署验证成功"
            else
              echo "❌ 部署验证失败"
              exit 1
            fi

      - name: Health check
        if: steps.vars.outputs.should_deploy == 'true'
        run: |
          # 等待服务启动
          sleep 60
          
          # 健康检查
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://${{ matrix.environment.server }}:${{ matrix.environment.port }}/books; then
              echo "✅ 健康检查通过"
              exit 0
            fi
            echo "等待服务启动... ($attempt/$max_attempts)"
            sleep 30
            ((attempt++))
          done
          
          echo "❌ 健康检查失败"
          exit 1

      - name: Notify deployment status
        if: always() && steps.vars.outputs.should_deploy == 'true'
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ ${{ matrix.environment.name }} 环境部署成功"
            echo "🔗 访问地址: http://${{ matrix.environment.server }}:${{ matrix.environment.port }}"
          else
            echo "❌ ${{ matrix.environment.name }} 环境部署失败"
          fi 